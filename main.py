#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CHAPUZALIAPRL
Aventura de texto sobre Prevenci√≥n de Riesgos Laborales en entornos inform√°ticos  
Ley 31/1995 de PRL de Espa√±a
"""

import time
from utilidades import Colors, Utilidades
from escenarios import Escenarios
from final import FinalJuego
from puntuaciones import GestorPuntuaciones


class JuegoPRL:
    def __init__(self):
        self.puntuacion = 0
        self.riesgos_detectados = 0
        self.decisiones_correctas = 0
        self.trabajadores_salvados = 0
        self.nombre_jugador = ""
        self.historial_decisiones = []
    
    def introduccion(self):
        """Introducci√≥n al juego"""
        Utilidades.mostrar_titulo()
        print(f"{Colors.OKGREEN}¬°Bienvenido/a al mundo del PRL (Para, Reza y Llora)!{Colors.ENDC}\n")
        self.nombre_jugador = input("Por favor, introduce tu nombre: ").strip()
        
        if not self.nombre_jugador:
            self.nombre_jugador = "Inspector An√≥nimo"
        
        Utilidades.limpiar_pantalla()
        Utilidades.mostrar_titulo()
        
        Utilidades.escribir_lento(f"\nBienvenido/a, {self.nombre_jugador}.")
        time.sleep(0.5)
        Utilidades.escribir_lento("\nHas sido contratado/a como T√©cnico de Prevenci√≥n de Riesgos Laborales")
        Utilidades.escribir_lento("en Chapuzalia M.L., una empresa de desarrollo software con 50 empleados.")
        time.sleep(0.5)
        Utilidades.escribir_lento("\nTu misi√≥n: Inspeccionar las instalaciones, identificar riesgos")
        Utilidades.escribir_lento("y tomar decisiones que garanticen la seguridad de los trabajadores y hacer as√≠ que no acabes en la calle.")
        time.sleep(0.5)
        Utilidades.escribir_lento(f"\n{Colors.WARNING}‚ö†Ô∏è  Cada decisi√≥n importa. La salud de tus compa√±eros y tu sueldo dependen de tus decisiones.{Colors.ENDC}")
        
        Utilidades.pausa()
    
    def _guardar_partida(self, partida_completa=True):
        """Guarda la partida en el archivo de puntuaciones"""
        if not self.nombre_jugador:
            return
        
        exito = GestorPuntuaciones.guardar_puntuacion(
            nombre=self.nombre_jugador,
            puntuacion=self.puntuacion,
            riesgos_detectados=self.riesgos_detectados,
            decisiones_correctas=self.decisiones_correctas,
            trabajadores_salvados=self.trabajadores_salvados,
            capitulos_completados=len(self.historial_decisiones),
            partida_completa=partida_completa
        )
        
        if exito and partida_completa:
            print(f"{Colors.OKGREEN}‚úÖ Puntuaci√≥n guardada correctamente!!{Colors.ENDC}\n")
    
    def final_juego(self):
        """Pantalla final con resultados"""
        Utilidades.limpiar_pantalla()
        
        FinalJuego.mostrar_pantalla_final(
            self.nombre_jugador,
            self.puntuacion,
            self.riesgos_detectados,
            self.decisiones_correctas,
            self.trabajadores_salvados,
            self.historial_decisiones
        )
        
        # Guardar puntuaci√≥n
        self._guardar_partida(partida_completa=True)
    
    def jugar(self):
        """Funci√≥n principal del juego"""
        try:
            self.introduccion()
            
            Utilidades.limpiar_pantalla()
            Utilidades.mostrar_estadisticas(self.nombre_jugador, self.puntuacion, 
                                           self.riesgos_detectados, self.decisiones_correctas,
                                           self.trabajadores_salvados)
            decision1 = Escenarios.escenario_llegada()
            self.historial_decisiones.append(("llegada", decision1))
            Escenarios.procesar_llegada(decision1, self)
            
            Utilidades.limpiar_pantalla()
            Utilidades.mostrar_estadisticas(self.nombre_jugador, self.puntuacion,
                                           self.riesgos_detectados, self.decisiones_correctas,
                                           self.trabajadores_salvados)
            decision2 = Escenarios.escenario_puesto_trabajo()
            self.historial_decisiones.append(("puesto_trabajo", decision2))
            Escenarios.procesar_puesto_trabajo(decision2, self)
            
            Utilidades.limpiar_pantalla()
            Utilidades.mostrar_estadisticas(self.nombre_jugador, self.puntuacion,
                                           self.riesgos_detectados, self.decisiones_correctas,
                                           self.trabajadores_salvados)
            decision3 = Escenarios.escenario_emergencia()
            self.historial_decisiones.append(("emergencia", decision3))
            Escenarios.procesar_emergencia(decision3, self)
            
            Utilidades.limpiar_pantalla()
            Utilidades.mostrar_estadisticas(self.nombre_jugador, self.puntuacion,
                                           self.riesgos_detectados, self.decisiones_correctas,
                                           self.trabajadores_salvados)
            decision4 = Escenarios.escenario_climatizacion()
            self.historial_decisiones.append(("climatizacion", decision4))
            Escenarios.procesar_climatizacion(decision4, self)
            
            Utilidades.limpiar_pantalla()
            Utilidades.mostrar_estadisticas(self.nombre_jugador, self.puntuacion,
                                           self.riesgos_detectados, self.decisiones_correctas,
                                           self.trabajadores_salvados)
            decision5 = Escenarios.escenario_acoso()
            self.historial_decisiones.append(("acoso", decision5))
            Escenarios.procesar_acoso(decision5, self)
            
            Utilidades.limpiar_pantalla()
            Utilidades.mostrar_estadisticas(self.nombre_jugador, self.puntuacion,
                                           self.riesgos_detectados, self.decisiones_correctas,
                                           self.trabajadores_salvados)
            decision6 = Escenarios.escenario_pantallas()
            self.historial_decisiones.append(("pantallas", decision6))
            Escenarios.procesar_pantallas(decision6, self)
            
            Utilidades.limpiar_pantalla()
            Utilidades.mostrar_estadisticas(self.nombre_jugador, self.puntuacion,
                                           self.riesgos_detectados, self.decisiones_correctas,
                                           self.trabajadores_salvados)
            decision7 = Escenarios.escenario_covid()
            self.historial_decisiones.append(("covid", decision7))
            Escenarios.procesar_covid(decision7, self)
            
            Utilidades.limpiar_pantalla()
            Utilidades.mostrar_estadisticas(self.nombre_jugador, self.puntuacion,
                                           self.riesgos_detectados, self.decisiones_correctas,
                                           self.trabajadores_salvados)
            decision8 = Escenarios.escenario_estres()
            self.historial_decisiones.append(("estres", decision8))
            Escenarios.procesar_estres(decision8, self)
            
            Utilidades.limpiar_pantalla()
            Utilidades.mostrar_estadisticas(self.nombre_jugador, self.puntuacion,
                                           self.riesgos_detectados, self.decisiones_correctas,
                                           self.trabajadores_salvados)
            decision9 = Escenarios.escenario_teletrabajo()
            self.historial_decisiones.append(("teletrabajo", decision9))
            Escenarios.procesar_teletrabajo(decision9, self)
            
            Utilidades.limpiar_pantalla()
            Utilidades.mostrar_estadisticas(self.nombre_jugador, self.puntuacion,
                                           self.riesgos_detectados, self.decisiones_correctas,
                                           self.trabajadores_salvados)
            decision10 = Escenarios.escenario_productos_quimicos()
            self.historial_decisiones.append(("productos_quimicos", decision10))
            Escenarios.procesar_productos_quimicos(decision10, self)
            
            Utilidades.limpiar_pantalla()
            Utilidades.mostrar_estadisticas(self.nombre_jugador, self.puntuacion,
                                           self.riesgos_detectados, self.decisiones_correctas,
                                           self.trabajadores_salvados)
            decision11 = Escenarios.escenario_embarazo()
            self.historial_decisiones.append(("embarazo", decision11))
            Escenarios.procesar_embarazo(decision11, self)
            
            Utilidades.limpiar_pantalla()
            Utilidades.mostrar_estadisticas(self.nombre_jugador, self.puntuacion,
                                           self.riesgos_detectados, self.decisiones_correctas,
                                           self.trabajadores_salvados)
            decision12 = Escenarios.escenario_final()
            self.historial_decisiones.append(("final", decision12))
            Escenarios.procesar_final(decision12, self)
            
            self.final_juego()
            
        except KeyboardInterrupt:
            # Mostrar estad√≠sticas al interrumpir
            print(f"\n\n{Colors.WARNING}‚ö†Ô∏è  Juego interrumpido por el usuario.{Colors.ENDC}\n")
            
            if self.nombre_jugador:
                print(f"{Colors.BOLD}Estad√≠sticas al momento de la interrupci√≥n:{Colors.ENDC}\n")
                print(f"üë§ Nombre del inspector: {self.nombre_jugador}")
                print(f"‚≠ê Puntuaci√≥n: {self.puntuacion}/100")
                print(f"üîç Riesgos detectados: {self.riesgos_detectados}")
                print(f"‚úÖ Decisiones correctas: {self.decisiones_correctas}")
                print(f"ÔøΩÔ∏è  Situaciones cr√≠ticas resueltas: {self.trabajadores_salvados}/12")
                print(f"üìä Cap√≠tulos completados: {len(self.historial_decisiones)}/12\n")
                
                # Guardar partida interrumpida
                self._guardar_partida(partida_completa=False)
                print(f"{Colors.OKCYAN}üíæ Partida guardada en el historial{Colors.ENDC}\n")
            else:
                print("No llegaste a comenzar la partida.\n")
                
        except Exception as e:
            print(f"\n{Colors.FAIL}‚ùå Error inesperado: {e}{Colors.ENDC}\n")


def mostrar_creditos():
    """Muestra los cr√©ditos del juego con efecto de m√°quina de escribir"""
    print("\n")
    
    # Arte ASCII grande para "CR√âDITOS"
    creditos_ascii = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                               ‚ïë
‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
‚ïë    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
‚ïë                                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    
    # Mostrar el t√≠tulo con efecto de escritura
    for linea in creditos_ascii.split('\n'):
        print(f"{Colors.HEADER}{Colors.BOLD}{linea}{Colors.ENDC}")
        time.sleep(0.1)
    
    print("\n")
    time.sleep(0.3)
    
    # Informaci√≥n de cr√©ditos con efecto de m√°quina de escribir
    Utilidades.escribir_lento(f"{Colors.OKGREEN}{Colors.BOLD}Chapuzeando EntreunosYCeros{Colors.ENDC}")
    print("\n")
    time.sleep(0.3)
    Utilidades.escribir_lento(f"{Colors.OKCYAN}üîó https://github.com/sapoclay/chapuzaliaprl{Colors.ENDC}")
    print("\n\n")
    time.sleep(0.3)
    Utilidades.escribir_lento(f"{Colors.WARNING}Proyecto para educar a los lobos. Basado en ParaRezaYLlora (PRL) ... o como le llaman algunos ... Prevenci√≥n de Riesgos Laborales{Colors.ENDC}")
    print()
    time.sleep(0.2)
    Utilidades.escribir_lento(f"{Colors.WARNING}en entornos de tecnolog√≠a y desarrollo software.{Colors.ENDC}")
    print("\n\n")
    time.sleep(0.3)
    Utilidades.escribir_lento(f"{Colors.OKBLUE}Basado en lo poco que conozco la Ley 31/1995 de PRL de Espa√±a{Colors.ENDC}")
    Utilidades.escribir_lento(f"{Colors.OKBLUE}... Cuando salga la pel√≠cula, lo har√© m√°s curioso.{Colors.ENDC}")
    print("\n\n")
    time.sleep(0.5)
    print(f"{Colors.BOLD}¬°Gracias por jugar!{Colors.ENDC}\n")


def main():
    """Funci√≥n principal"""
    while True:
        Utilidades.limpiar_pantalla()
        Utilidades.mostrar_titulo()
        
        print(f"{Colors.BOLD}MEN√ö PRINCIPAL{Colors.ENDC}\n")
        print(f"{Colors.OKBLUE}1.{Colors.ENDC} üéÆ Jugar nueva partida")
        print(f"{Colors.OKBLUE}2.{Colors.ENDC} üèÜ Ver ranking de puntuaciones")
        print(f"{Colors.OKBLUE}3.{Colors.ENDC} üìä Ver estad√≠sticas globales")
        print(f"{Colors.OKBLUE}4.{Colors.ENDC} üé¨ Ver cr√©ditos")
        print(f"{Colors.OKBLUE}5.{Colors.ENDC} Salir")
        
        try:
            opcion = Utilidades.obtener_decision(5)
            
            if opcion == 1:
                # Jugar
                juego = JuegoPRL()
                juego.jugar()
                input(f"\n{Colors.OKBLUE}Presiona INTRO para volver al men√∫...{Colors.ENDC}")
                
            elif opcion == 2:
                # Ver ranking
                Utilidades.limpiar_pantalla()
                GestorPuntuaciones.mostrar_ranking()
                input(f"{Colors.OKBLUE}Presiona INTRO para volver al men√∫...{Colors.ENDC}")
                
            elif opcion == 3:
                # Ver estad√≠sticas
                Utilidades.limpiar_pantalla()
                GestorPuntuaciones.mostrar_estadisticas()
                input(f"{Colors.OKBLUE}Presiona INTRO para volver al men√∫...{Colors.ENDC}")
                
            elif opcion == 4:
                # Ver cr√©ditos
                Utilidades.limpiar_pantalla()
                mostrar_creditos()
                input(f"{Colors.OKBLUE}Presiona INTRO para volver al men√∫...{Colors.ENDC}")
                
            elif opcion == 5:
                # Salir
                print(f"\n{Colors.OKGREEN}¬°Gracias por jugar! Hasta pronto, y vuelve con dinero!!.{Colors.ENDC}\n")
                break
                
        except KeyboardInterrupt:
            print(f"\n\n{Colors.OKGREEN}¬°Hasta m√°s ver!{Colors.ENDC}\n")
            break


if __name__ == "__main__":
    main()
